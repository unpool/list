<?php

namespace Tests\Unit;

use Baum\Node;
use Illuminate\Database\Eloquent\Collection;
use Tests\TestCase;

class NodeRepositoryTest extends TestCase
{
    /**
     * @var \App\Repositories\NodeRepositoryImp
     */
    protected $node_repo;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->node_repo = new \App\Repositories\NodeRepository(new \App\Models\Node());
    }

    public function test_get_tree_path()
    {
        $res = $this->node_repo->getTreePath(\App\Models\Node::where('parent_id', null)->first());
        self::assertTrue($res instanceof Collection);
    }

    public function test_create_root_node()
    {
        $res = $this->node_repo->addChildNode(
            [
                'title' => 'first',
            ]
        );
        self::assertTrue($res instanceof Node && $res->parent_id === null);
        $res->delete();
    }

    public function test_create_node_child_of_root()
    {
        $root = $this->node_repo->addChildNode(
            [
                'title' => 'root',
            ]
        );
        $child = $this->node_repo->addChildNode([
            'title' => 'child',
        ], $root);
        self::assertTrue($child instanceof Node && $child->parent_id === $root->id);
        $root->delete();
    }

    public function test_all_is_leaves()
    {
        $leaves = $this->node_repo->getLeaves();
        self::assertTrue($leaves instanceof Collection);
        foreach ($leaves as $node) {
            self::assertTrue($node->children()->count() === 0);
        }
    }

    public function test_all_is_root()
    {
        $roots = $this->node_repo->getRoots();
        if ($roots) {
            foreach ($roots as $root) {
                self::assertTrue($root->parent_id === null);
            }
        }
        self::assertTrue($roots instanceof Collection);
    }

    public function test_get_child_of_node()
    {
        $node = \App\Models\Node::inRandomOrder()->first();
        if ($node) {
            if ($node->children()->get()->count()) {
                foreach ($node->children()->get() as $child) {
                    self::assertTrue($child->parent_id === $node->id);
                }
            } else {
                self::assertTrue(\App\Models\Node::where('parent_id', $node->id)->count() === 0);
            }
        }
        self::assertTrue(true);
        // for else stage, first run create child of node method
    }

    public function test_remove_node()
    {
        $node = \App\Models\Node::first();
        if ($node) {
            $this->node_repo->removeNodeAndAllChildren($node);
            self::assertTrue(\App\Models\Node::where('id', $node->id)->count() === 0);
        }
        else {
            self::assertTrue(true);
        }
    }
}
